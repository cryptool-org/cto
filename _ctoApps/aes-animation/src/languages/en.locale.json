{
    "playButtonTooltip": "Play / pause",
    "jumpForwardsTooltip": "Jump forwards",
    "jumpBackwardsTooltip": "Jump backwards",
    "settingsButtonTooltip": "Settings",
    "settingsCloseBtn": "Close",


    "infoButtLabel": "Info",
    "navigationButtonLabel": "Navigation",
    "formButtonLabel": "Input",

    "settingsTitle": "Settings",
    "settingsThemeLabel": "Theme:",
    "settingsSpeedLabel": "Animation speed",
    "settingsJumpLabel": "Jump duration (seconds)",
    "settingsLanguageLabel": "Language",

    "settingsNotice": "If you click on the gear again, you will return to the animation.",
    "settingsNoticeJump": "Sets the jump distance in the animation timeline for the buttons \"Jump backwards\" and \"Jump forwards\".",
    "settingsInfo": "<p>Each page of this animation consists of four parts: a display field that shows the animation. Below this field is a control bar where the animation can be started/stopped, as well as buttons to go directly to individual animation pages. There is also a \"Jump forwards\" and a \"Jump backwards\" button. These allow you to move directly across the page boundaries through the animation timeline via setting the jump's duration.</p><p>Below the control bar there is another section with an info text about the page displayed, and at the very bottom a form for entering the parameters and the message, used in the animation, and for the output.</p>",

    "themeOptionDefault": "Default",
    "themeOptionNew": "Theme 2",

    "languageOptionEN": "English",
    "languageOptionDE": "German",

    "formTitle": "AES Animation Data",
    "formSelectInputOne": "Enter message in ",
    "formSelectInputTwo": "or in ",
    "formInfo": "The values in the animation change when updating the data below. Try it out!",

    "plaintextLabel": "Plaintext (input in ASCII)",
    "plaintextHexadecimalLabel": "Plaintext (in hex)",
    "plaintextHexadecimalLabelTwo": "Plaintext (input in hex)",
    "keyLabel": "Key (input in hex)",
    "outputLabel": "Ciphertext (output in hex)",

    "encryptButtonLabel": "Encrypt",
    "formErrorMessage": "Key must consist of 32 hexadecimal chars.",
    "formErrorPlaintextNotEmpty": "The input must not be empty.",
    "formErrorKeyNotEmpty": "The key must not be empty.",

    "page-1-title": "Page 1: AES Animation Intro",
    "page-1-info": "<p>This animation gives a high-level overview of the inner workings of the AES / Rijndael algorithm. Data entered below are processed dynamically. The animation then visualizes the encryption of the first plaintext block. For inputs longer than one block, the blocks are calculated in ECB mode and displayed in the \"Ciphertext (output in hex)\" field.</p><p>The gear wheel takes you to the settings, where you can e.g. switch between German and English. It uses a size of 128 bit for both, the data block and the key. For an in-depth look at the mathematics behind the algorithm please consult the according literature.</p><p>For a start have a look at: <a href='https://en.wikipedia.org/wiki/Advanced_Encryption_Standard'>https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></p><p>Another presentation of AES can be found at: <a href='https://www.cryptool.org/en/cto/aes-step-by-step'>https://www.cryptool.org/en/cto/aes-step-by-step</a></p><p>This animation was originally implemented in Flash by Enrique Zabala, first for his master thesis and then extended for the CrypTool project. Here, this animation has been implemented using a modern web technology (PixiJS). Also, the animation data here is not hardwired, but dynamically uses the values from the input given below.</p>",

    "page-2-title": "Page 2: Encryption Overview",
    "page-2-info": "<p>The Advanced Encryption Standard (AES) is also known by its original name Rijndael. It is a modern symmetric block cipher. This page displays the inputs (plaintext and cipher key) and the output (ciphertext).</p>",

    "page-3-title": "Page 3: Encryption Process and Cipher Key",
    "page-3-info": "<p>AES is based on the Rijndael block cipher. While the Rijndael algorithm allows for a range of key and block sizes (128, 160, 192, 224, 256 bit), AES is not that flexible. AES has a fixed block length of 128 bit and only allows 128, 192, and 256 bits as key lengths.</p><p>The state (contains the message) and the key can be visualized as a rectangular array of bytes. While the state/key bitlength divided by 32 determines the number of columns, each column will always consist of 4 bytes. These columns are also sometimes referred to as words. The number of columns in the state is usually denoted as Nb and the number of columns in the cipher key as Nk.</p><p>As we use a 128 bit length for both the state and the key in this animation, both Nb and Nk, are 4 in this case. The resulting arrays can thus be displayed as four by four tables, using hexadecimal notation for the byte values.</p><p> For the sake of clarity, the encryption process and the creation of the key schedule (generation of round keys) are presented in separate sections. Since the actual encryption process is the more interesting part for most people, this will be covered first in part A.</p>",

    "page-4-title": "A) Encryption Process (Page 4)",
    "page-4-info": "<p>This section explains the encryption process and its operations. The decryption process works very similar in an inverted manner.</p>",

    "page-5-title": "Page 5: Encryption Process Overview",
    "page-5-info": "<p>The AES encryption is an iterative process. The amount of rounds depends on the key length.</p><ul><li>10 rounds for 128-bit keys.</li><li>12 rounds for 192-bit keys.</li><li>14 rounds for 256-bit keys.</li></ul><p> Each of the iterations, except the initial and the last one, performs the same four operations in the following order:</p><ul><li>SubBytes</li><li>ShiftRows</li><li>MixColumns</li><li>AddRoundKey</li></ul><p>The last round skips the MixColumns step. Additionally, there is an initial round (#1) at the start, which only performs the AddRoundKey operation.</p>",

    "page-6-title": "Page 6: Transformation Types",
    "page-6-info": "<p>The following pages (pages 7-10) cover the 4 encryption transformations: SubBytes, ShiftRows, MixColumns, and AddRoundKey.</p> ",

    "page-7-title": "Page 7: SubBytes",
    "page-7-info": "<p>The SubBytes transformation replaces each byte in the state using an 8-bit substitution box, commonly referred to as S-Box. Using the S-Box provides the non-linearity in the cipher. To reverse this step, the inverse of the S-Box is used in the decryption process.</p>",

    "page-8-title": "Page 8: ShiftRows",
    "page-8-info": "<p>In the ShiftRows transformation, the bytes of each row are shifted by a given offset. The first row is always left unchanged, while the offset for rows two to four depends on the block length. </p><p>For a block length of 128 bit (4 Nb) the bytes in rows two, three, and four are shifted by one, two, and three respectively. </p></p>Shifting the rows by these pre-defined offsets creates an output in which each column of the output state contains bytes from each column of the input state. </p><p>The goal of this step is to ensure that the columns are not encrypted independently.</p>",

    "page-9-title": "Page 9: MixColumns",
    "page-9-info": "<p>In the MixColumns transformation, the four bytes of each column of the state are combined using an invertible linear transformation. The MixColumns function takes four bytes as an input and outputs four bytes. Together with ShiftRows, MixColumns provides diffusion in this cipher.</p>",

    "page-10-title": "Page 10: AddRoundKey",
    "page-10-info": "<p>In the AddRoundKey transformation, a round key is applied to the state by a simple bitwise XOR. This round key was created by expanding the cipher key before the encryption/decryption process (more on page 13+). A round key has the same length as a block.</p>",

    "page-11-title": "Page 11: Rounds 1 - 5",
    "page-11-info": "<p>This page displays the states after each transformation during rounds 1 to 5 of the encryption process.</p>",

    "page-12-title": "Page 12: Rounds 6 - 10",
    "page-12-info": "<p>This page displays the states after each transformation during rounds 6 to 10 of the encryption process, as well as the final output for the first block.</p>",

    "page-13-title": "B) Key Schedule (Page 13)",
    "page-13-info": "<p>The given cipher key (main key) is expanded to create round keys used in each round in the encryption / decryption process. The number of round keys is equal to the number of rounds plus one and their size depends on the message block's length. </p>",

    "page-14-title": "Page 14: Key Expansion",
    "page-14-info": "<p>The \"key schedule\" is the process by which the cipher key gets expanded into a set of round keys. This happens before the encryption/decryption process. The overall number of resulting round key bits is equal to the block length multiplied by the number of rounds plus one (here 128 bit * 11 = 1408 bit).</p><p>Reminder: Nb = number of words in message block, Nk = number of words in cipher key.</p><p>This expanded key is an array of 4-byte words (W). The first Nb words are filled with the cipher key. The following words are then recursively defined using words with smaller indices.</p><p>The exact operations used for this depend on the value of Nk. There are two sets of operations, one for Nk â‰¤ 6 and one for Nk > 6.</p><p>Each word following the cipher key gets created by using an XOR on the previous word W[i-1] and the word Nk positions earlier W[i-Nk]. </p><p>For words in positions that are a multiple of Nk, a transformation is applied to W[i-1] before the XOR. Additionally a round constant (Rcon) is XORed. </p><p>The transformation on W[i-1] consists of a cyclic shift of the bytes in the word (RotByte), followed by a table lookup to all four bytes of the word (SubBytes).</p><p>The individual round key (i) can then be defined by selecting the sub-array W[Nb * i] to W[Nb *  (i+1)].</p>",

    "page-15-title": "Page 15: Animation Finish Page",
    "page-15-info": "</p>Thank you for watching. You can use the buttons shown above to jump back to the start or directly revisit parts A) and B) of the animation.</p>",

    "page-1": {
        "titlePartOne": "AES",
        "titlePartTwo": "Cipher",
        "text": "The animation uses a 128 bit size for both the data block and the key",
        "introTitle": "Intro",
        "introText": "Press play to start the animation."
    },

    "page-2": {
        "boxText": "AES Encryptor",
        "textLeft": "Cipher key",
        "textBottom": "Ciphertext",
        "textTop": "Plaintext"
    },

    "page-3": {
        "title": "Input",
        "subtitleLeft": "State",
        "subtitleRight": "Cipher key",
        "explanationLeft": "This is a block from the plaintext message to be encrypted",
        "explanationRight": "Hexadecimal notation (sample):",
        "textLeft": "to encryption process",
        "textRight": "to key schedule"
    },

    "page-4": {
        "title": "Encryption Process",
        "text": "Performing the encryption of the given plaintext block in the initial round, the 9 main rounds, and the final round (using all 4 different transformations in the main rounds)."
    },

    "page-5": {
        "title": "Encryption Process",
        "titleInitialRound": "initial round",
        "titleMainRounds": "9 main rounds",
        "titleFinalRound": "final round",
        "labelInitial": "AddRoundKey",
        "labelMrone": "1 - SubBytes",
        "labelMrTwo": "2 - ShiftRows",
        "labelMrThree": "3 - MixColumns",
        "labelMrFour": "4 - AddRoundKey",
        "labelFrOne": "SubBytes",
        "labelFrTwo": "ShiftRows",
        "labelFrThree": "AddRoundKey",

        "boxTitleOne": "Cipher key",
        "boxTitleTwo": "Round key 0",
        "boxTitleThree": "Round key 10",
        "round": "Round"
    },

    "page-6": {
        "title": "The 4 types of encryption transformations",
        "labelone": "1 - SubBytes",
        "labelTwo": "2 - ShiftRows",
        "labelThree": "3 - MixColumns",
        "labelFour": "4 - AddRoundKey"
    },

    "page-7": {
        "title": "1 - SubBytes",
        "round": "Round 1",
        "sboxLabel": "S-Box",
        "sboxExplanation": "byte substitution table"
    },

    "page-8": {
        "title": "2 - ShiftRows",
        "rotateTextOne": "rotate over 1 byte",
        "rotateTextTwo": "rotate over 2 bytes",
        "rotateTextThree": "rotate over 3 bytes"
    },

    "page-9": {
        "title": "3 - MixColumns",
        "text": "The 4 numbers of each column are modulo multiplied by a given matrix in AES's Galois field.",
        "text2": "The MixColumns step along with the ShiftRows step is the primary source of diffusion in AES."
    },

    "page-10": {
        "title": "4 - AddRoundKey",
        "roundKeyLabel": "Round key",
        "roundKeyText": "Produced as round key 1 during the key schedule â€“ see page 14"
    },

    "page-11": {
        "introText": "The 4 transformations are applied to the state for 9 more rounds. The final round does not include the MixColumns transformation.",
        "roundLabel": "Start of round",
        "subBytesLabel": "After SubBytes",
        "ShiftRowsLabel": "After ShiftRows",
        "MixColumnsLabel": "After MixColumns",
        "RoundKeyLabel": "Round key",
        "inputLabel": "Input",
        "roundOneLabel": "Round 1",
        "roundTwoLabel": "Round 2",
        "roundThreeLabel": "Round 3",
        "roundFourLabel": "Round 4",
        "roundFiveLabel": "Round 5"
    },

    "page-12": {
        "roundLabel": "Start of round",
        "subBytesLabel": "After SubBytes",
        "ShiftRowsLabel": "After ShiftRows",
        "MixColumnsLabel": "After MixColumns",
        "RoundKeyLabel": "Round key",
        "outputLabel": "Output",
        "roundSixLabel": "Round 6",
        "roundSevenLabel": "Round 7",
        "roundEightLabel": "Round 8",
        "roundNineLabel": "Round 9",
        "roundTenLabel": "Round 10",
        "cipherTextLabel": "Ciphertext"
    },

    "page-13": {
        "title": "Key Schedule",
        "text": "Expansion of the given cipher key into 11 partial keys, used in the initial round, the 9 main rounds and the final round"
    },

    "page-14": {
        "title": "Key Schedule",
        "RotWordLabel": "RotWord",
        "RconLabel": "Rcon",
        "SubBytesLabel": "SubBytes",
        "SBoxLabel": "S-Box",
        "WOne": "Wi-4",
        "WTwo": "Wi-1",
        "WThree": "Wi",
        "RconFourLabel": "Rcon(4)",

        "textIntro": "The expanded key can be seen as an array of 32-bit words (columns W<sub>i</sub>), numbered from 0 to 43. The first four columns are filled with the given cipher key.",
        "text": "Words in positions that are multiples of 4 (W<sub>4</sub>, W<sub>8</sub>, ..., W<sub>40</sub>) are calculated by:",
        "textA": "a) Applying the function RotWord and transformation SubBytes to the previous word W<sub>i-1</sub>.",
        "textB": "b) Adding (XOR) this result to the word 4 positions earlier W<sub>i-4</sub>, plus a round constant Rcon.",
        "textXOR": "The remaining 32-bit words W<sub>i</sub>, are calculated by adding (XOR) the previous word W<sub>i-1</sub> with the word 4 positions earlier W<sub>i-4</sub>",

        "cipherKeyLabel": "Cipher key",
        "roundKeyOneLabel": "Round key 1",
        "roundKeyTwoLabel": "Round key 2",
        "roundKeyThreeLabel": "Round key 3",
        "roundKeyTenLabel": "Round key 10"
    },

    "page-15": {
        "finishOverlayBackToEncryption": "View encryption process again",
        "finishOverlayBackToKeySchedule": "View key schedule again",
        "finishOverlayBackToStart": "Restart animation",

        "encryptionTitle": "Page 4: A) Encryption Process",
        "keyScheduleTitle":  "Page 13: B) Key Schedule"
    }
}
